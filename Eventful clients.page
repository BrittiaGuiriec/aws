# Serving static content

We have learned that, unlike most common web servers, [Node.js]() does interpret the request [URL]() as a path in the local filesystem. Indeed, any request for any path in the following server

~~~ {.javascript}
function handler(req, res) {
  ...
}

http.createServer(handler).listen(12345);
~~~

is handled by the handler function, which is responsible for *routing* requests for different URLs.

Nevertheless, it is often useful to serve to the client static files that are not generated by [JavaScript](). The `connect` module offers a middleware, called `static`, serving exactly this purpose. The following code

~~~ {.javascript}
var connect = require('connect');

function handler(req, res) {
  console.log(req.url);
}

connect()
  .use(connect.static(__dirname + '/static'))
  .use(handler)
  .listen(12345);
~~~

tries to interpret any [URL]() as the name of a file under `static` and sends the contents of the file to the client. When the file is not found, the default `handler` function is called instead.


1. In your working directory, create a folder named `static`. Put some text files (`.txt`, `.html`, `.css`, etc.) in `static`. Put at least a [JavaScript]() file too.

2. In your working directory, create a script containing the code above. Execute the script using [Node.js]().

3. In the browser, visit your server and ask for the various static [URL]()s. Ask for some non-existing files and observe the console. Ask for the static [JavaScript]() files and observe the output.


# Simple CSS

In this section we will refer to <http://www.w3schools.com/css/> for the list and description of CSS properties.

1. In the static directory, put a file containing the following code

    ~~~ {.html}
    <!DOCTYPE html>
      <html>
        <head>
          <title>DOM and CSS</title>
        </head>
        <body>
          <h1 id='hello' class='content'>Hello world!</h1>
          <img src='http://www.w3.org/html/logo/badge/html5-badge-h-solo.png' alt='HTML5' />
          <p id='msg1' class='content'>This is my first dynamic page.</p>
          <p id='msg2' class='content'>Using <a href='http://w3.org/css'>CSS</a>.</p>
          <p id='msg3' class='content'>So, please, don't be too critic.</p>
          <p id='msg4' class='content'>Thanks.</p>
          <p id='footer'>Created on <span class='date'>Jul 1, 2013</span>.</p>
        </body>
    </html>
    ~~~

2. In the same static directory, create a [CSS]() file and link it to the [HTML]() page (see the examples in the [class](The client side, CSS, DOM and JQuery)). Without editing the [HTML]() code achieve the following styling effects:

    -  Make the `<h1>` section begin with a horizontal line (see the [border](http://www.w3schools.com/css/css_border.asp) properties). Adjust [padding](http://www.w3schools.com/css/css_padding.asp) and [margin](http://www.w3schools.com/css/css_margin.asp) to your pleasure.
    - Make the title of the `<h1>` section be [centered](http://www.w3schools.com/css/css_text.asp), and adjust the other [font properties](http://www.w3schools.com/css/css_font.asp) as you like.
    - Move the picture to the right of the page (see the [positioning](http://www.w3schools.com/css/css_positioning.asp) properties).
    - Make the link appear as normal black text, turning red when the mouse passes over it (see the [link pseudoclasses](http://www.w3schools.com/css/css_link.asp) `:link`, `:hover`, `:active` and `:visited`).
    - Using the identifiers of the [HTML]() tags, make every second paragraph be written in white on gray background.
    - Make dates invisible (see the [`visiblity`](http://www.w3schools.com/css/css_display_visibility.asp) and [`opacity`](http://www.w3schools.com/cssref/css3_pr_opacity.asp) properties).
    - Set the [`display`](http://www.w3schools.com/css/css_display_visibility.asp) property of al paragraphs of class `content` to `inline-block`.
    - Draw [outlines](http://www.w3schools.com/css/css_outline.asp) around any element of class `content`.


The result may look something like this

<style>
  #css { height: 10em ; overflow: auto ; position: relative }
  #hello { border-bottom: solid thin black ; text-align: center ; margin : 20pt ; padding : 1ex }
  #css img { position: absolute ; top : 0 ; right : 20pt}
  #css a:link { text-decoration: none ; color: black }
  #css a:hover { color: red }
  #msg1, #msg3, #my_footer { color: white; background: gray }
  .date { opacity: 0.4 }
  #css p.content { display: inline-block }
  #css .content { outline: solid thick paleturquoise }
</style>

<div id='css'>
  <h1 id='hello'>Hello world!</h1>
  <img src='http://www.w3.org/html/logo/badge/html5-badge-h-solo.png' alt='HTML5' />
  <p id='msg1' class='content'>This is my first dynamic page.</p>
  <p id='msg2' class='content'>Using <a href='http://w3.org/css'>CSS</a>.</p>
  <p id='msg3' class='content'>So, please, don't be too critic.</p>
  <p id='msg4' class='content'>Thanks.</p>
  <p id='my_footer'>Created on <span class='date'>Jul 1, 2013</span>.</p>
</div>



# DOM navigation and events with JQuery




