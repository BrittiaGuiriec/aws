# Serving static content

We have learned that, unlike most common web servers, [Node.js]() does interpret the request [URL]() as a path in the local filesystem. Indeed, any request for any path in the following server

~~~ {.javascript}
function handler(req, res) {
  ...
}

http.createServer(handler).listen(12345);
~~~

is handled by the handler function, which is responsible for *routing* requests for different URLs.

Nevertheless, it is often useful to serve to the client static files that are not generated by [JavaScript](). The `connect` module offers a middleware, called `static`, serving exactly this purpose. The following code

~~~ {.javascript}
var connect = require('connect');

function handler(req, res) {
  console.log(req.url);
}

connect()
  .use(connect.static(__dirname + '/static'))
  .use(handler)
  .listen(12345);
~~~

tries to interpret any [URL]() as the name of a file under `static` and sends the contents of the file to the client. When the file is not found, the default `handler` function is called instead.


1. In your working directory, create a folder named `static`. Put some text files (`.txt`, `.html`, `.css`, etc.) in `static`. Put at least a [JavaScript]() file too.

2. In your working directory, create a script containing the code above. Execute the script using [Node.js]().

3. In the browser, visit your server and ask for the various static [URL]()s. Ask for some non-existing files and observe the console. Ask for the static [JavaScript]() files and observe the output.


# Simple CSS

In this section we will refer to <http://www.w3schools.com/css/> for the list and description of CSS properties.

1. In the static directory, put a file containing the following code

    ~~~ {.html}
    <!DOCTYPE html>
      <html>
        <head>
          <title>DOM and CSS</title>
        </head>
        <body>
          <h1 id='hello' class='content'>Hello world!</h1>
          <img src='http://www.w3.org/html/logo/badge/html5-badge-h-solo.png' alt='HTML5' />
          <p id='msg1' class='content'>This is my first dynamic page.</p>
          <p id='msg2' class='content'>Using <a href='http://w3.org/css'>CSS</a>.</p>
          <p id='msg3' class='content'>So, please, don't be too critic.</p>
          <p id='msg4' class='content'>Thanks.</p>
          <p id='footer'>Created on <span class='date'>Jul 1, 2013</span>.</p>
        </body>
    </html>
    ~~~

2. In the same static directory, create a [CSS]() file and link it to the [HTML]() page (see the examples in the [class](The client side, CSS, DOM and JQuery)). Without editing the [HTML]() code achieve the following styling effects:

    -  Make the `<h1>` section begin with a horizontal line (see the [border](http://www.w3schools.com/css/css_border.asp) properties). Adjust [padding](http://www.w3schools.com/css/css_padding.asp) and [margin](http://www.w3schools.com/css/css_margin.asp) to your pleasure.
    - Make the title of the `<h1>` section be [centered](http://www.w3schools.com/css/css_text.asp), and adjust the other [font properties](http://www.w3schools.com/css/css_font.asp) as you like.
    - Move the picture to the right of the page (see the [positioning](http://www.w3schools.com/css/css_positioning.asp) properties).
    - Make the link appear as normal black text, turning red when the mouse passes over it (see the [link pseudoclasses](http://www.w3schools.com/css/css_link.asp) `:link`, `:hover`, `:active` and `:visited`).
    - Using the identifiers of the [HTML]() tags, make every second paragraph be written in white on gray background.
    - Make dates invisible (see the [`visiblity`](http://www.w3schools.com/css/css_display_visibility.asp) and [`opacity`](http://www.w3schools.com/cssref/css3_pr_opacity.asp) properties).
    - Set the [`display`](http://www.w3schools.com/css/css_display_visibility.asp) property of al paragraphs of class `content` to `inline-block`.
    - Draw [outlines](http://www.w3schools.com/css/css_outline.asp) around any element of class `content`.


The result may look something like this

<style>
  #css { height: 10em ; overflow: auto ; position: relative }
  #hello { border-bottom: solid thin black ; text-align: center ; margin : 20pt ; padding : 1ex }
  #css img { position: absolute ; top : 0 ; right : 20pt}
  #css a:link { text-decoration: none ; color: black }
  #css a:hover { color: red }
  #msg1, #msg3, #my_footer { color: white; background: gray }
  .date { opacity: 0.4 }
  #css p.content { display: inline-block }
  #css .content { outline: solid thick paleturquoise }
</style>

<div id='css'>
  <h1 id='hello'>Hello world!</h1>
  <img src='http://www.w3.org/html/logo/badge/html5-badge-h-solo.png' alt='HTML5' />
  <p id='msg1' class='content'>This is my first dynamic page.</p>
  <p id='msg2' class='content'>Using <a href='http://w3.org/css'>CSS</a>.</p>
  <p id='msg3' class='content'>So, please, don't be too critic.</p>
  <p id='msg4' class='content'>Thanks.</p>
  <p id='my_footer'>Created on <span class='date'>Jul 1, 2013</span>.</p>
</div>



# DOM navigation and events with JQuery


In this section we will use [JQuery]() to access the [DOM]() and react to events. The full documentation is available at <http://api.jquery.com/>.

[JQuery]() is a [JavaScript]() library that runs **in the browser**. To make it available in the browser we must point it to its source.

1. Edit the [HTML]() document of the previous section by adding the following line to the `<head>`

    ~~~ {.html}
    <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
    ~~~

    Alternatively, to keep working without internet connection, you can download the [JQuery]() sources from the link above and make it available to the client through the static directory.

The [JQuery]() script defines a global name `$` used to access [DOM]() elements inside the page via a CSS-like syntax.


## Via the browser console

Open your browser's console (`Shift+Ctrl+K` in Firefox; `F12`, then click on 'Console' in Chrome) and experiment with it by selecting some elements of the page. Here's some examples:

~~~ {.javascript}
$('#msg1');         // access the element with id msg1
$('.content');      // access all the elements with class content
$('p');             // access all <p> elements
~~~

The [CSS]() attributes of each element can be read and modified using the `.css` method. For example, the following code colors the title in red

~~~ {.javascript}
$('h1').css('color', 'red');
~~~

2. Using the browser console

    - Change the text color of the `<h1>` block.
    - Change the font properties of all the paragraphs belonging to the class `content`.
    - Center the footer paragraph and draw a line over it.
    - Make the second paragraph disappear using the `visibility` property first, then the `display` property.
    
3. Blink! Using the functions `setTimeout` or `setInterval` make the date appear and disappear every second like <span id='blink' class>this</span>. 

<script type='text/javascript'>
  var b = document.getElementById('blink');
  setInterval(function() {
    b.style.visibility = b.style.visibility == 'hidden' ? 'visible' : 'hidden';
  }, 1000);
</script>


## Reacting to events

The browser console is a good tool for debugging, but for serious scripts it is better to write them in separate files.

1. In your server's static directory create a file named `events.js` and link it from the [HTML]() document using a `<script>` tag like you did for [JQuery]().

The [DOM]() defines many events to react to user actions. [JQuery]() offers a uniform interface to them. The method [`.on`](http://api.jquery.com/on/) is defined on any [JQuery]() object and takes two parameters: the name of the event and a callback function to call when the event is triggered. For example, every time a `<p>` element is clicked, the code

~~~ {.javascript}
$('p').on('click', function (evt) {
  var par = $(this);         // this creates a JQuery object from 
                             // the element that fired the event
  console.log(par.text());
});
~~~

logs to the browser console the text of the paragraph.

Event handlers can be suppressed using the [`.off`](http://api.jquery.com/off/) method.

**Important:** the method `.on` only applies to [DOM]() objects that already exist at the moment of calling. If the code above is put in a script in the `<head>` of the document, no `<p>` element will exist at the moment `.on` is called. The solution is to execute the event binding code in a `document.ready` callback, like shown in [class](The client side, CSS, DOM and JQuery).

~~~ {.javascript}
$( function () {               // this function is only called when all the 
                               // document has been read.

  $('p').on('click', function (evt) {
    console.log( $(this).text() );
  })
} );
~~~

Another solution described in the [JQuery API](http://api.jquery.com/on/) is to use *delegated events*.

2. Using `.on`, or any of the [specific methods](http://api.jquery.com/category/events/), make the `<h1>` react to double clicks (event `dblcick`) by doubling its font size.

3. Make the date blink only when the mouse is over it (events `mouseover` and `mouseout`, or `mouseenter` and `mouseleave`).


## An SVG animation

[SVG](Web graphics) is a standard for vector drawing. The following
code draws a rectangle like the one in the box below.

~~~ {.html}
<svg id='mysvg' width='100%' height='10'>
<rect id='myrectangle' x='0' width='2%' height='8'/>
</svg>
~~~

<svg
  id='mysvg'
  style='padding:1ex; border: solid thin black; margin-left:25%'
  width='50%'
  height='10'>
<rect id='myrectangle' width='2%' height='8'/>
</svg>

<script type='text/javascript'>
  var Slider = {
    svg : document.getElementById('mysvg'),
    rect : document.getElementById('myrectangle'),
    hasFocus : false,
    
    move : function(e) {
      if (this.hasFocus) {
        if (e.keyCode == 39)
          this.rect.setAttribute('x', Number(this.rect.getAttribute('x')) + 10);
        else if (e.keyCode == 37)
          this.rect.setAttribute('x', Number(this.rect.getAttribute('x')) - 10);
      }
    },
    
    init : function() {
      document.addEventListener('keydown', function(e) { Slider.move(e) }, false);
      this.svg.addEventListener('mouseover',
                                function() {
                                  Slider.rect.style.fill = 'red';
                                  Slider.hasFocus = true },
                                  false);
      this.svg.addEventListener('mouseout',
                                function() {
                                  Slider.rect.style.fill = 'black';
                                  Slider.hasFocus = false },
                                  false);
    }
  }
  
  Slider.init();
</script>

If you put your mouse over the box, the rectangle turns red (be careful: in Chrome, the box is very tiny!); then you can use the left or right arrow to move
the rectangle. You will implement a similar behavior. At any
time, you can read the source code of this page to seek help (note, however, that this page uses pure [DOM](), no [JQuery]()).

1. Write the following function (an event handler):
    
    ~~~ {.javascript}
    function move(evt) { 
      // this logs the code of the pressed key to the console
      console.log(evt.which);
    }
    ~~~

2. Register the function `move` as event handler for the [`keydown`](http://api.jquery.com/keydown/) event. 

3. Open the console and see what the *key codes* for left and right
arrow are.

4. Modify the `move` function so that on a left arrow key the
rectangle is moved to the left by 10. You can use the [`.attr`](http://api.jquery.com/attr/) method to modify the `x`
attribute of the rectangle. If you need to convert a string to a number you can use the
[`Number`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number)
object.

5. Implement the behavior that colors the rectangle in red and deactivates the key action when the mouse is not over the box. You can use the `mouseover` and the `mouseout` events, but be careful: Chrome drove me mad on this one!



# Advanced topic: Unobtrusive Javascript (Optional)

In this exercise, we want to add a (not that) simple animation on
[HTML]() text, making it look like if a human was typing it in a
terminal. The final result should look like the animation in
the box below when you click on the button (doesn't work in old
versions of IE).

<script type='text/javascript' src='js/incremental.js'></script>

<input type='button' style='margin:2px 4em 2px 4em' onclick='Incremental.start()' value='Click to start the animation' />
<div style="margin:0 4em 0 4em; padding: 1em; border:solid thin black; overflow:
scroll; max-height:8em;">
<p class='incremental' data-incremental-by-letter >Here's an example of animated text.</p>
<p class='incremental' data-incremental-by-letter data-incremental-speed='10'>And here's 
another example flowing faster.</p>
</div>

We will use pure [DOM]() syntax (no [JQuery]()) in the rest of this section, but you are free to use [JQuery]() if you wish. At any stage, you can read the source of the script above (no [JQuery](), though). Try to solve the exercise by your own as much as you can, though.

To make the script more portable (and the exercise more difficult), we
will adhere to the principles of
[unobtrusive JavaScript](http://en.wikipedia.org/wiki/Unobtrusive_JavaScript),
meaning that no [JavaScript]() is going to appear in the [HTML]() at
all. The link between the [HTML]() sources and the script will be made
through standard and customized [HTML]() attributes.

To get an idea, use the document inspector to read the sources of this
page and see how the animation is implemented.  If you except the
attribute

~~~
onclick='Incremental.start()'
~~~

of the `input` tag (a minor concession), all the [Javascript]() is
contained in a separate file called `incremental.js`. We have thus
strictly adhered to the principles of unobtrusive [Javascript](). To
tell the script to animate the paragraphs, they have been declared as
follows:

~~~ {.html}
<p class='incremental' data-incremental-by-letter >Here's an example of animated text.</p>
<p class='incremental' data-incremental-by-letter data-incremental-speed='10'>And here's 
  another example flowing faster.</p>
~~~

The [JavaScript]() code looks for elements belonging to the
`incremental` class and animates them (and only them). The other
attributes `data-incremental-by-letter` and `data-incremental-speed`
are user-defined attributes (a cool new feature of [HTML5](HTML)) that
allow the user to configure the script behavior.

Using this style of coding, the [HTML]() document is much smaller and
human readable than if we had included the [Javascript]() code in
it. A user that has deactivated [JavaScript]() will experience faster
download and improved accessibility. This is the way to the future of
web applications!

Write a script implementing the above behavior. Here's some
suggestions:

- Implement all the logic in an object (we called it `Incremental`).
- Write a method that gets the list of elements belonging to the
  `incremental` class and hides them.
- Write a method `prepare` that gets the next paragraph to uncover. If there is
  one, it calls the method `show` below, if there is no
  paragraph left it terminates.
- Write a method `show` that shows the current paragraph character
  by character. Use `setTimeout` to repeatedly call `show`. When the
  paragraph is over, call back `prepare`.
- Write a function `start` that starts the animation. Be careful to
  only call this function after the document has been loaded, for
  otherwise it won't be able to find nodes of the [DOM](). You can
  register it to the `window.onload` event if you want it to be called
  on startup just after the [DOM]() has been loaded.
- You will certainly run into problems with the binding of the `this`
  identifier. [Read this](http://bonsaiden.github.com/JavaScript-Garden/#function.this).
- Access and modify the text of each paragraph using `firstChild.data`.
- You can access custom attributes in the [HTML]() document using the
  syntax `elt.dataset.myCustomAttribute`. Dashes get transformed to
  CamelCase, as for the styling attributes.
- The blinking cursor is better implemented in a separate object, but
  you can use the `Incremental` object as a namespace for it. This is
  a good practice to avoid name clashes.

Once you're done, here's some ideas to improve this script. If you
implement any of these, I'd be interested in reading your solution:

- Make the script correctly work with tags that contain arbitrary
  content (not just text).
- Make the `start` function restart the script even when it is in the
  middle of the animation.
