---
categories: Classes JavaScript
toc: no
...

view this as a [slideshow](?export&format=Slidy)


# JavaScript

[JavaScript]() is an *interpreted*, *dynamic*, *weakly typed*,
*prototype-based* scripting language supporting *object oriented*,
*functional* and *imperative* programming styles.

**Interpreted:** code is distributed as source and interpreted on the fly.

**Dynamically typed:** variables can change type during execution.

**Weakly typed:** variables with different types can be combined
  without explicit conversions.
  
**Prototype-based:** there is no distinction between classes and
  objects: **everything is object**.
  
**Functional:** functions are *first class objects*.



# History of JavaScript

**1995:** Netscapes starts work on *LiveScript*. The name is quickly
  changed to *JavaScript*.

**1996:** MS releases *JScript*, a clone of *LiveScript*.

**1996:** ECMA standardizes [JavaScript]() into [ECMAScript]().

**2000:** Release of JavaScript 1.5, the most commonly supported
  version of [JavaScript]().
  
**2008-2010:** Releases of JavaScript 1.8.X.

[JavaScript]() is released by the Mozilla Foundation. 

[JavaScript]() 1.8 is only supported by **MSIE 9**, **Firefox 3-4**
and **Opera 11**.

[JavaScript]() **is not Java**. It is much more similar to Python or Ruby.


# JavaScript syntax

~~~ {.javascript}
if (x == 1) {
    ...
} else if (x == 2) {
    ...
} else {
    ...
}
~~~


~~~ {.javascript}
switch (2+x) {
    case 4:
        ...
        break;
    case 5+1:
        ...
        break;
    default:
        ...
}
~~~

--------

~~~ {.javascript}
for ( var i = 0 ; i < 10 ; i++ ) {
    ...
}
~~~

~~~ {.javascript}
for ( var x in obj ) {
    ...
}
~~~

~~~ {.javascript}
while (condition) {
    ...
}
~~~


~~~ {.javascript}
do {
    ...
} while (condition);
~~~


~~~ {.javascript}
try {
    ...
} catch (e) {
    if (e instanceof SyntaxError) {
        ...
    } else {
        ...
    }
} finally {
    ...
}
~~~



# Variables and predefined values

**Variables must be declared !**

~~~ {.javascript}
var a = 0;
a += 1;
~~~

Non-declared variables have **global scope**. Use them parsimoniously.

**Variables are dynamically typed**

~~~ {.javascript}
var a = 1;
a = 'something';
~~~

**Predefined variables**: `undefined`, `NaN`, `Infinity`.

**Use of `undefined`**

~~~ {.javascript}
function (x, y) {
    if (undefined === y)   // tests if the user has given y
        ...
}
~~~


# Some important operators

**Weak comparison**

~~~ {.javascript}
var x = 2;
x == '2';     // true
~~~

**Strong comparison** 

~~~ {.javascript}
var x = 2;
x === '2';    // false
~~~

**Field membership** (to test if a property is defined in an object)

~~~ {.javascript}
if ('property' in obj) ...;
if ('key' in myarray) ...;       // much less useful
~~~


# Arrays

**Dynamic allocation**

~~~ {.javascript}
var myarray = ['one', 'two', 'three'];
myarray[5] = 'five';
myarray.length;                        // result is 6
~~~

**Associative arrays** (not very well supported, avoid them!)

~~~ {.javascript}
var myarray = []
myarray['six'] = 6;
~~~


**Array library methods** (only work on the non associative part)

~~~ {.javascript}
['one', 'two', 'three'].join('+')   // result is 'one+two+three'
~~~


# Functions

**Simple syntax** (function arguments do not need the `var` keyword!!!)

~~~ {.javascript}
function incr(a) {
    return a+1;
}
~~~

**Functions are first class objects**

~~~ {.javascript}
function apply(f, x) {
    return f(x);
}

apply(incr, 4);         // result is 5
~~~

**Anonymous functions**

~~~ {.javascript}
myFun = function () {
    ...
}
~~~

------

**Nested functions**

~~~ {.javascript}
function counter() {
    var c = 0;
    return function(step) {
        return c += step;
    }
}

var cnt = counter();
[cnt(1), cnt(2), cnt(1)]      // result is [1, 3, 4]
~~~

# Variadic functions

**Omitting arguments**

~~~ {.javascript}
function maybe(x, y) {
    if (undefined === y) 
        return x;
    else
        return x+y;
}

maybe(1);          // result is 1
maybe(1, 2);       // result is 3
~~~


**Giving more arguments**

~~~ {.javascript}
function prepend(x) {
    var res = []
    for (a in arguments)            // notice the difference with PHP !
        res.push(x + arguments[a]);
    
    return res
}

prepend('pre-', 'a', 'bbb', 'c');   // result is ['pre-a', 'pre-bbb', 'pre-c']
~~~


# Objects

**Anonymous objects** (similar to associative arrays)

~~~ {.javascript}
var myObj = {
    car: "Peugeot",
    color: "blue"
};

'car' in myObj;              // true
myObj.car == "Peugeot";      // true
myObj['car'] == "Peugeot";   // true

var prop = 'car';
myObj[prop] == "Peugeot";    // true
~~~

Object contents can be **dynamically changed**

~~~ {.javascript}
var myObj = {};
myObj.car = "Renault";
~~~


# Methods

~~~ {.javascript}
var myObj = {
    day: "5",
    month: "January",
    year: "2012",
    
    english: enDate,
    
    french: function() {
        return this.day   + " " +
               this.month + " " +
               this.year;
    }
}

function enDate() {
    return this.month + " "  +
           this.day   + ", " +
           this.year;
}

myObj.custom = function() {
        return this.year  + "-" +
               this.month + "-" +
               this.day;
}
~~~


# Object constructors

Object constructors are just functions

~~~ {.javascript}
function Car(model, color, year) {
    this.model = model;
    this.color = color;
    this.year = year;
    
    this.revision = function() {
        return this.year + 5;
    }
}

var mycar = new Car("Peugeot", "blue", 2010);
mycar.revision();                             // result is 2015
~~~


# Prototypes

Prototypes replace inheritance

~~~ {.javascript}
function A() { this.one = 1; }

function B() { this.two = 2; }
B.prototype = new A();

var C = new B();
C.one;                         // result is 1
C.two;                         // result is 2
~~~


Prototypes enrich objects

~~~ {.javascript}
var foo = "bar";
foo.sillyMethod;                    // undefined

String.prototype.sillyMethod =
    function() { return "silly"; }
foo.sillyMethod();                  // result is "silly"
~~~


# Predefined JavaScript objects

**`String`**, **`Array`**, **`Boolean`**, **`Number`**, **`Date`**: self-explanatory prototypes 

**`Math`**: Math functions (exp, log, etc.)

~~~ {.javascript}
Math.PI;         // pi constant
Math.sqrt(16);   // result is 4
~~~

**`RegExp`**: regular expressions (Perl-like syntax)

~~~ {.javascript}
var pattern = RegExp("sub", "i");
pattern = /sub/i;                  // same as before

pattern.test("Substring")          // result is true
~~~


# How do I run JavaScript?

A simple tool for testing small JavaScript: the **browser console**!

**Firefox:** type `Shift+Ctrl+K`.

**Firebug:** type `F12`.

**Chrome:** type `F12`.

Features:

> - Shows [HTTP]() requests,
> - Shows [CSS]() and [JavaScript]() errors and warnings,
> - Interactive JavaScript shell for quick testing,
> - Logging facility.
> - Multiline input (type `Shift+Enter`)


# JavaScript inside HTML

**Inclusion of an external script file** (the preferred way)

~~~ {.html}
<script type="text/javascript" src="myscripts.js"></script>
~~~

**The `<script>` tag**

~~~ {.html}
<script type="text/javascript">
    function foo() {
        return 'bar';
    }

    alert(foo());
</script>
~~~

**Javascript inside attributes**

~~~ {.html}
<a href="javascript:alert('Hi!')">...</a>

<input type="button" onclick="foo()" value="Click me" />
~~~


# Debug information from JavaScript

The old way: [**`alert`**](javascript:alert('Debug'))

~~~ {.html}
<a href="javascript:alert('Debug')">
~~~

The new, much better, way: the
[**`console`** object](javascript:console.log('Debug'))

~~~ {.html}
<a href="javascript:console.log('Debug')">
~~~


<script type="text/javascript">
    myObj = {'one':1, 'two':2, 'three':3};
</script>


Compare the difference on objects: [Alert](javascript:alert(myObj)) vs
[Console](javascript:console.log(myObj)).

~~~ {.javascript}
myObj = {'one':1, 'two':2, 'three':3};
~~~


The `console` object **is not a [JavaScript]() standard**, but it has
a relatively standard interface across browser tools
(Firefox/Firebug/Chrome).


And introducing the youngest tool: **Firefox scratchpad**
(`Shift+F4`). An interactive [JavaScript]() editor for quick
prototyping.


# Pages become dynamic: the DOM API

[DOM]() stands for **Document Object Model**.

> - An **API** made of **([JavaScript]()) Objects**;
> - Represents any element of an [HTML]() document with a corresponding object;
> - Represents the tree structure of the document;
> - Dispatches **events** (mouse, keyboard, etc.) to scripts.

The current version: **DOM Level 3** (supported by most browsers)


# The root objects

**Window**: the browser's window (not a [DOM]() object, properly
  speaking):.
  
~~~ {.javascript}
window.innerHeight + " x " + window.innerWidth
~~~

<script>
function size() {
    document.getElementById('size').innerHTML = window.innerHeight + " x " + window.innerWidth;
}
window.addEventListener('load', size, false);
window.addEventListener('resize', size, false);
</script>

Current height: **<span id='size'></span>**

**Document**: the [HTML]() document

~~~  {.javascript}
document.referrer
~~~

You came to this page from: <script>document.write(document.referrer)</script>



# DOM tree navigation methods

<script>
function L() {
    document.getElementById('L').style.backgroundColor='red';
}
function pL() {
    document.getElementById('L').previousSibling.style.backgroundColor='blue';
}
function x() {
    document.getElementById('ilove').appendChild(document.createTextNode('!'));
}
function h() {
    Array.map(document.getElementById('ilove').getElementsByTagName('span'),
        function(x) { x.style.color='white';}
    );
}
</script>

**Direct access**: [`getElementById`](javascript:L()), `getElementsByName`.

~~~ {.javascript}
document.getElementById('L').style.backgroundColor = 'red';
~~~

**Traversing the tree**: `childNodes`, `firstChild`, `lastChild`,
  `nextSibling`, [`previousSibling`](javascript:pL()), `parentNode`,
  ...

~~~ {.javascript}
document.getElementById('L').previousSibling.style.backgroundColor = 'blue';
~~~

**Modifying the tree**: [`appendChild`](javascript:x()), `removeChild`, `insertBefore`, `replaceChild`, ...

~~~ {.javascript}
document.getElementById('ilove').appendChild(document.createTextNode('!'));
~~~

**Access by tag**: [`getElementsByTagName`](javascript:h()),

~~~ {.javascript}
Array.map(document.getElementById('ilove').getElementsByTagName('span'),
          function(x) { x.style.color='white' } );
~~~

**Access by class** (since [HTML5](HTML)): `getElementsByClassName`.


**Example:**
<div id="ilove" style="display:inline-block">
<span>I </span><span id='L'>L</span>ove DOM
</div>

~~~ {.html}
<div id="ilove"><span>I </span><span id='L'>L</span>ove DOM</div>
~~~



# DOM events

**Inside HTML**: `onload`, `onclick`, `onmouseover`, `onkeypress`, `ondrag`, ...

<div onmouseover="this.style.opacity='0.4'" onmouseout="this.style.opacity='1'">

~~~ {.html}
<div id="mydiv" onmouseover="this.style.opacity='0.4'"
                onmouseout="this.style.opacity='1'">
~~~

</div>


**From [JavaScript]()**: cleaner separation from [HTML](), prefer this.

~~~ {.javascript}
document.getElementById('mydiv').onmouseover =
    function(e) { this.style.opacity = '0.4'; };
~~~


**From [JavaScript]()**: even better, no conflict with third party scripts!

~~~ {.javascript}
function fade() {
    this.style.opacity = '0.4';
}

document.getElementById('mydiv').addEventListener('mouseover', fade, false);
~~~

**Warning**, this doesn't work on old versions of MSIE.


# Where to read more

An accessible reference to the [DOM](): <http://www.w3schools.com/jsref/>.

The [W3C]() standards page: <http://www.w3.org/DOM/>

The complete guide to Javascript: <https://developer.mozilla.org/en/JavaScript/Guide>


# More tools

## Use a DOM inspector

In **Firefox**, from the console.

In **Firebug**, from the HTML navigation tab.

In **Chrome**?


## Other tools

**Venkman** [JavaScript]() debugger: <https://developer.mozilla.org/en/Venkman>
